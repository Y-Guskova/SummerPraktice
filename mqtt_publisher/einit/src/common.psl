/* Security configuration for "mqtt publisher" example. */

/* Definition of execute-interface. */
execute: kl.core.Execute

/* Import basic security policies declarations. */
use nk.base._

/**
 * This code includes EDL descriptions of correspondig external
 * (non-provided by SDK) entities.
 */
use EDL mosquitto.Env
use EDL mosquitto.Publisher
use EDL mosquitto.VfsRamFs
use EDL mosquitto.VfsSdcardFs
use EDL mosquitto.VfsNet
use EDL kl.rump.Dhcpcd
use EDL kl.Ntpd
use EDL kl.drivers.SDCard
use EDL kl.drivers.RAMDisk
use EDL Einit
use EDL kl.core.Core

/**
 * This policy enables to start up system entities by KOS kernel.
 */
execute src = kl.core.Core, dst = kl.core.Core
{
    grant()
}

execute src = kl.core.Core, dst = Einit
{
    grant()
}

/**
 * These instructions enables to start up and initialize entities specified in file init.yaml.in.
 */
execute src = Einit, dst = mosquitto.Env
{
    grant()
}

execute src = Einit, dst = kl.drivers.RAMDisk
{
    grant()
}

execute src = Einit, dst = kl.drivers.SDCard
{
    grant()
}

execute src = Einit, dst = mosquitto.VfsRamFs
{
    grant()
}

execute src = Einit, dst = mosquitto.VfsSdcardFs
{
    grant()
}

execute src = Einit, dst = mosquitto.VfsNet
{
    grant()
}

execute src = Einit, dst = kl.rump.Dhcpcd
{
    grant()
}

execute src = Einit, dst = kl.Ntpd
{
    grant()
}

execute src = Einit, dst = mosquitto.Publisher
{
    grant()
}

/**
 * This code enables to send requests from Einit entity to KOS kernel
 * and get responses. It makes able to use system calls by Einit.
 */
request src = Einit, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = Einit
{
    grant()
}

/**
 * This code enables to send requests from Dhcpcd entity to KOS kernel
 * and get responses.
 */
request src = kl.rump.Dhcpcd, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.rump.Dhcpcd
{
    grant()
}

/**
 * This code enables to send requests from Ntpd entity to KOS kernel
 * and get responses.
 */
request src = kl.Ntpd, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.Ntpd
{
    grant()
}

/**
 * This code enables to send requests from RAMDisk entity to KOS kernel
 * and get responses.
 */
request src = kl.drivers.RAMDisk, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.drivers.RAMDisk
{
    grant()
}

/**
 * This code enables to send requests from Env entity to KOS kernel
 * and get responses.
 */
request src = mosquitto.Env, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = mosquitto.Env
{
    grant()
}

/**
 * This code enables to send requests from VfsNet entity to KOS kernel
 * and get responses.
 */
request src = mosquitto.VfsNet, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = mosquitto.VfsNet
{
    grant()
}

/**
 * This code enables to send requests from VfsRamFs entity to KOS kernel
 * and get responses.
 */
request src = mosquitto.VfsRamFs, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = mosquitto.VfsRamFs
{
    grant()
}

/**
 * This code enables to send requests from VfsSdcardFs entity to KOS kernel
 * and get responses.
 */
request src = mosquitto.VfsSdcardFs, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = mosquitto.VfsSdcardFs
{
    grant()
}

/**
 * This code enables to send requests from Publisher entity to KOS kernel
 * and get responses.
 */
request src = mosquitto.Publisher, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = mosquitto.Publisher
{
    grant()
}

/**
 * This code enables to send requests from Dhcpcd entity to Env entity
 * and get responses.
 */
request src = kl.rump.Dhcpcd, dst = mosquitto.Env
{
    grant()
}

response src = mosquitto.Env, dst = kl.rump.Dhcpcd
{
    grant()
}

/**
 * This code enables to send requests from Ntpd entity to Env entity
 * and get responses.
 */
request src = kl.Ntpd, dst = mosquitto.Env
{
    grant()
}

response src = mosquitto.Env, dst = kl.Ntpd
{
    grant()
}

/**
 * This code enables to send requests from Publisher entity to Env entity
 * and get responses.
 */
request src = mosquitto.Publisher, dst = mosquitto.Env
{
    grant()
}

response src = mosquitto.Env, dst = mosquitto.Publisher
{
    grant()
}

/**
 * This code enables to send requests from VfsNet entity to Env entity
 * and get responses.
 */
request src = mosquitto.VfsNet, dst = mosquitto.Env
{
    grant()
}

response src = mosquitto.Env, dst = mosquitto.VfsNet
{
    grant()
}

/**
 * This code enables to send requests from VfsRamFs entity to Env entity
 * and get responses.
 */
request src = mosquitto.VfsRamFs, dst = mosquitto.Env
{
    grant()
}

response src = mosquitto.Env, dst = mosquitto.VfsRamFs
{
    grant()
}

/**
 * This code enables to send requests from VfsSdcardFs entity to Env entity
 * and get responses.
 */
request src = mosquitto.VfsSdcardFs, dst = mosquitto.Env
{
    grant()
}

response src = mosquitto.Env, dst = mosquitto.VfsSdcardFs
{
    grant()
}

/**
 * This code enables to send requests from Publisher entity to VfsSdcardFs entity
 * and get responses.
 */
request src = mosquitto.Publisher, dst = mosquitto.VfsSdcardFs
{
    grant()
}

response src = mosquitto.VfsSdcardFs, dst = mosquitto.Publisher
{
    grant()
}

/**
 * This code enables to send requests from Publisher entity to VfsRamFs entity
 * and get responses.
 */
request src = mosquitto.Publisher, dst = mosquitto.VfsRamFs
{
    grant()
}

response src = mosquitto.VfsRamFs, dst = mosquitto.Publisher
{
    grant()
}

/**
 * This code enables to send requests from Dhcpcd entity to VfsRamFs entity
 * and get responses.
 */
request src = kl.rump.Dhcpcd, dst = mosquitto.VfsRamFs
{
    grant()
}

response src = mosquitto.VfsRamFs, dst = kl.rump.Dhcpcd
{
    grant()
}

/**
 * This code enables to send requests from VfsSdcardFs entity to SDCard entity
 * and get responses.
 */
request src = mosquitto.VfsSdcardFs, dst = kl.drivers.SDCard
{
    grant()
}

response src = kl.drivers.SDCard, dst = mosquitto.VfsSdcardFs
{
    grant()
}

/**
 * This code enables to send requests from VfsRamFs entity to RAMDisk entity
 * and get responses.
 */
request src = mosquitto.VfsRamFs, dst = kl.drivers.RAMDisk
{
    grant()
}

response src = kl.drivers.RAMDisk, dst = mosquitto.VfsRamFs
{
    grant()
}

/**
 * This code enables to send requests from Publisher entity to VfsNet entity
 * and get responses.
 */
request src = mosquitto.Publisher, dst = mosquitto.VfsNet
{
    grant()
}

response src = mosquitto.VfsNet, dst = mosquitto.Publisher
{
    grant()
}

/**
 * This code enables to send requests from Dhcpcd entity to VfsNet entity
 * and get responses.
 */
request src = kl.rump.Dhcpcd, dst = mosquitto.VfsNet
{
    grant()
}

response src = mosquitto.VfsNet, dst = kl.rump.Dhcpcd
{
    grant()
}

/**
 * This code enables to send requests from SDCard entity to KOS kernel
 * and get responses.
 */
request src = kl.drivers.SDCard, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.drivers.SDCard
{
    grant()
}

/**
 * This code enables to call methods of the security interface.
 */

security src = kl.drivers.SDCard, method = Register
{
    grant ()
}

security src = kl.drivers.RAMDisk, method = Register
{
    grant ()
}

/**
 * This code enables to send requests from Dhcpcd entity to VfsSdcardFs entity
 * and get responses.
 */
request src = kl.rump.Dhcpcd, dst = mosquitto.VfsSdcardFs
{
    grant()
}

response src = mosquitto.VfsSdcardFs, dst = kl.rump.Dhcpcd
{
    grant()
}

/**
 * This code enables to send requests from Ntpd entity to VfsRamFs entity
 * and get responses.
 */
request src = kl.Ntpd, dst = mosquitto.VfsRamFs
{
    grant()
}

response src = mosquitto.VfsRamFs, dst = kl.Ntpd
{
    grant()
}

/**
 * This code enables to send requests from Ntpd entity to VfsNet entity
 * and get responses.
 */
request src = kl.Ntpd, dst = mosquitto.VfsNet
{
    grant()
}

response src = mosquitto.VfsNet, dst = kl.Ntpd
{
    grant()
}

/**
 * This code enables to send requests from Ntpd entity to VfsSdcardFs entity
 * and get responses.
 */
request src = kl.Ntpd, dst = mosquitto.VfsSdcardFs
{
    grant()
}

response src = mosquitto.VfsSdcardFs, dst = kl.Ntpd
{
    grant()
}
